{"version":3,"sources":["App.js","hooks/useInterval.jsx","serviceWorker.js","index.js"],"names":["App","grid","useRef","xTiles","Math","floor","window","innerWidth","yTiles","innerHeight","width","height","useState","Array","fill","tiles","setTiles","ctx","setCtx","generation","setGeneration","running","setRunning","speed","setSpeed","neighbors","useEffect","current","getContext","initGrid","i","beginPath","moveTo","lineTo","stroke","drawTiles","length","fillStyle","fillRect","runGame","newTiles","tileNeighbors","map","neighbor","count","j","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","className","ref","onClick","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","tileIndex","toggleTile","clearRect","random","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71c4a761.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { useInterval } from \"./hooks/useInterval\";\nimport \"./App.css\";\nimport { SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from \"constants\";\n\nfunction App() {\n\tconst grid = useRef(null);\n\t// normalize width and height to exactaly fit tiles\n\tconst xTiles = Math.floor((window.innerWidth * 0.9) / 20);\n\tconst yTiles = Math.floor((window.innerHeight * 0.9) / 20);\n\tconst width = xTiles * 20;\n\tconst height = yTiles * 20;\n\tconst [tiles, setTiles] = useState(new Array(xTiles * yTiles).fill(false));\n\tconst [ctx, setCtx] = useState(null);\n\tconst [generation, setGeneration] = useState(0);\n\tconst [running, setRunning] = useState(false);\n\tconst [speed, setSpeed] = useState(1000);\n\tconst neighbors = [\n\t\t-(xTiles - 1),\n\t\t-xTiles,\n\t\t-(xTiles + 1),\n\t\t-1,\n\t\t1,\n\t\txTiles - 1,\n\t\txTiles,\n\t\txTiles + 1,\n\t];\n\n\tuseEffect(() => {\n\t\tsetCtx(grid.current.getContext(\"2d\"));\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (ctx) initGrid();\n\t}, [ctx]);\n\n\tconst initGrid = () => {\n\t\t// draw vertical lines\n\t\tfor (var i = 20; i < width; i += 20) {\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(i, 0);\n\t\t\tctx.lineTo(i, height);\n\t\t\tctx.stroke();\n\t\t}\n\t\t// draw horizontal lines\n\t\tfor (var i = 20; i < height; i += 20) {\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(0, i);\n\t\t\tctx.lineTo(width, i);\n\t\t\tctx.stroke();\n\t\t}\n\t};\n\n\tconst clear = () => {\n\t\tctx.clearRect(0, 0, width, height);\n\t\tsetTiles(new Array(xTiles * yTiles).fill(false));\n\t\tsetGeneration(0);\n\t\tsetRunning(false);\n\t\tinitGrid();\n\t};\n\n\tconst toggleTile = (x, y, tileIndex) => {\n\t\t// toggle tile\n\t\tif (tiles[tileIndex]) {\n\t\t\tctx.fillStyle = \"#FFFFFF\";\n\t\t} else {\n\t\t\tctx.fillStyle = \"#000000\";\n\t\t}\n\t\tctx.fillRect(x + 1, y + 1, 18, 18);\n\t\t// update tiles array\n\t\tconst newTiles = [...tiles];\n\t\tnewTiles[tileIndex] = !newTiles[tileIndex];\n\t\tsetTiles(newTiles);\n\t};\n\n\tconst drawTiles = () => {\n\t\tfor (var i = 0; i < tiles.length; i++) {\n\t\t\tif (tiles[i]) {\n\t\t\t\tctx.fillStyle = \"#000000\";\n\t\t\t} else {\n\t\t\t\tctx.fillStyle = \"#FFFFFF\";\n\t\t\t}\n\t\t\tctx.fillRect(\n\t\t\t\tMath.floor(i % xTiles) * 20 + 1,\n\t\t\t\tMath.floor(i / xTiles) * 20 + 1,\n\t\t\t\t18,\n\t\t\t\t18\n\t\t\t);\n\t\t}\n\t};\n\n\tconst runGame = () => {\n\t\tdrawTiles();\n\t\tconst newTiles = [...tiles];\n\t\tfor (var i = 0; i < tiles.length; i++) {\n\t\t\tconst tileNeighbors = neighbors.map((neighbor) => neighbor + i);\n\t\t\tvar count = 0;\n\t\t\t// count alive neighbors\n\t\t\tfor (var j = 0; j < tileNeighbors.length; j++) {\n\t\t\t\tif (tiles[tileNeighbors[j]]) {\n\t\t\t\t\tcount += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tiles[i]) {\n\t\t\t\tif (count !== 2 && count !== 3) {\n\t\t\t\t\tnewTiles[i] = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (count === 3) {\n\t\t\t\t\tnewTiles[i] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsetTiles(newTiles);\n\t\tsetGeneration(generation + 1);\n\t};\n\n\tconst handleGridClick = (e) => {\n\t\tif (!running) {\n\t\t\tconst rect = grid.current.getBoundingClientRect();\n\t\t\tconst x = Math.floor((e.clientX - rect.left) / 20);\n\t\t\tconst y = Math.floor((e.clientY - rect.top) / 20);\n\t\t\tconst tileIndex = xTiles * y + x;\n\t\t\ttoggleTile(x * 20, y * 20, tileIndex);\n\t\t}\n\t};\n\n\tuseInterval(() => {\n\t\tif (running) runGame();\n\t}, speed);\n\n\tconst startAnimation = () => {\n\t\trunGame();\n\t\tsetRunning(true);\n\t};\n\n\tconst stopAnimation = () => {\n\t\tsetRunning(false);\n\t};\n\n\tconst random = () => {\n\t\tconst newTiles = [...tiles];\n\t\tfor (var i = 0; i < newTiles.length; i++) {\n\t\t\tconst rand = Math.random();\n\t\t\tif (rand > 0.8) {\n\t\t\t\tnewTiles[i] = true;\n\t\t\t}\n\t\t}\n\t\tsetTiles(newTiles);\n\t\tdrawTiles();\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<canvas\n\t\t\t\tclassName=\"grid\"\n\t\t\t\tref={grid}\n\t\t\t\twidth={width}\n\t\t\t\theight={height}\n\t\t\t\tonClick={handleGridClick}\n\t\t\t></canvas>\n\t\t\t<p>Generation: {generation}</p>\n\t\t\t<button onClick={startAnimation}>Start</button>\n\t\t\t<button onClick={stopAnimation}>Stop</button>\n\t\t\t<button onClick={runGame}>Next</button>\n\t\t\t<button onClick={clear}>Clear</button>\n\t\t\t<button onClick={() => setSpeed(speed - 100)}>Increase Speed</button>\n\t\t\t<button onClick={() => setSpeed(speed + 100)}>Decrease Speed</button>\n\t\t\t<button onClick={random}>Random</button>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React, { useState, useEffect, useRef } from \"react\";\n\nexport function useInterval(callback, delay) {\n\tconst savedCallback = useRef();\n\n\t// Remember the latest callback.\n\tuseEffect(() => {\n\t\tsavedCallback.current = callback;\n\t}, [callback]);\n\n\t// Set up the interval.\n\tuseEffect(() => {\n\t\tfunction tick() {\n\t\t\tsavedCallback.current();\n\t\t}\n\t\tif (delay !== null) {\n\t\t\tlet id = setInterval(tick, delay);\n\t\t\treturn () => clearInterval(id);\n\t\t}\n\t}, [delay]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}